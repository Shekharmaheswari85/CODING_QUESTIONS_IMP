Problem Name: Stock Span
Problem Difficulty: None
Problem Constraints: 1 <= N <= 10^6
Problem Description:
The stock span problem is a financial problem where we have a series of N daily price quotes for a stock and we need to calculate span of stockâ€™s price for all N days. You are given an array of length N, where i<sup>th</sup> element of array denotes the price of a stock on i<sup>th</sup>. Find the span of stock's price on i<sup>th</sup> day, for every 1<=i<=N.<br>A span of a stock's price on a given day, i, is the maximum number of consecutive days before the (i+1)<sup>th</sup> day, for which stock's price on these days is less than or equal to that on the i<sup>th</sup> day.

Input Format: First line contains integer N denoting size of the array. <br>
Next line contains N space separated integers denoting the elements of the array.
Sample Input: 5
30
35
40
38
35
Output Format: Display the array containing stock span values.
Sample Output: 1 2 3 1 1 END



=====Solution=====
import java.util.*;
public class Main {

		public static void main(String args[]) throws Exception {
		// Your Code Here
		Scanner s = new Scanner(System.in);
		int N=s.nextInt();
		Main mainobj = new Main();
		int[] prices=new int[N];
		for(int i=0;i<N;i++){
			prices[i]=s.nextInt();
		}
		StacksUsingArrays stack = mainobj.new StacksUsingArrays(prices.length);
		int[] ans=StockSpanUsingStacks(prices, stack);
		for(int i=0;i<ans.length;i++){
			System.out.print(ans[i]+" ");
		}
		System.out.print("END");

	}

	public static int[] StockSpanUsingStacks(int[] prices, StacksUsingArrays stack) throws Exception {
	    int[] span = new int[prices.length];
		
		stack.push(0);
		span[0] = 1;
		for (int i = 1; i < prices.length; i++) {
			while (stack.size() != 0 && prices[i] > prices[stack.top()]) {
				stack.pop();
			}
			if (stack.size() == 0) {
				span[i] = i + 1;
			} else {
				span[i] = i - stack.top();
			}
			stack.push(i);
		}
		return span;
	
	}

	

	private class StacksUsingArrays {
		private int[] data;
		private int tos;

		public static final int DEFAULT_CAPACITY = 10;

		public StacksUsingArrays() throws Exception {
			// TODO Auto-generated constructor stub
			this(DEFAULT_CAPACITY);
		}

		public StacksUsingArrays(int capacity) throws Exception {
			if (capacity <= 0) {
				System.out.println("Invalid Capacity");
			}
			this.data = new int[capacity];
			this.tos = -1;
		}

		public int size() {
			return this.tos + 1;
		}

		public boolean isEmpty() {
			if (this.size() == 0) {
				return true;
			} else {
				return false;
			}
		}

		public void push(int item) throws Exception {
			if (this.size() == this.data.length) {
				throw new Exception("Stack is Full");
			}
			this.tos++;
			this.data[this.tos] = item;
		}

		public int pop() throws Exception {
			if (this.size() == 0) {
				throw new Exception("Stack is Empty");
			}
			int retVal = this.data[this.tos];
			this.data[this.tos] = 0;
			this.tos--;
			return retVal;
		}

		public int top() throws Exception {
			if (this.size() == 0) {
				throw new Exception("Stack is Empty");
			}
			int retVal = this.data[this.tos];
			return retVal;
		}

		public void display() throws Exception {
			if (this.size() == 0) {
				throw new Exception("Stack is Empty");
			}
			for (int i = this.tos; i >= 0; i--) {
				System.out.println(this.data[i]);
			}

		}

	}
}
