#include<bits/stdc++.h>
// #include<ext/pb_ds/assoc_container.hpp>
// #include<ext/pb_ds/tree_policy.hpp>
#define int long long int
#define endl "\n"
#define pb push_back
int sum = 0;
#define arrinp(v) for(auto &i:v) cin>>i,sum+=i;
#define arrout(v) for(auto &i:v) cout<<i<<" ";
#define newline cout<<endl;
#define all(s) (s).begin(),(s).end()
#define dbg(a) cout<<a<<endl;
#define dbg2(a,b) cout<<a<<" "<<b<<endl;
using namespace std;
// using namespace __gnu_pbds;
// typedef tree<int,null_type,less<int>, rb_tree_tag,
//             tree_order_statistics_node_update> new_data_set;
//             // order_of_key(int)  k-th largest element
//             // find_by_order(int) gives us according to the order
//             // insert() to insert in the PBDS
//             // new_data_set ST; calling
void LCS(string s1, string s2, int n, int m) {
    int dp[n+1][m+1];
    for(int i=0;i<=n;i++){
        for(int j=0;j<=m;j++){
            if(i==0){
                dp[i][j]=j;
            }
            else if(j==0){
                dp[i][j]=i;
            }
            else if(s1[i-1]==s2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=1+min(dp[i][j-1],dp[i-1][j]);
            }
        }
    }
    int index=dp[n][m];
    string res(index,'\0');
    int i=n,j=m;
    while(i>0 and j>0){
        if(s1[i-1]==s2[j-1]){
            res[index-1]=s1[i-1];
            i--,j--,index--;
        }
        else if(dp[i-1][j]<dp[i][j-1]){
            res[index-1]=s1[i-1];i--;index--;
        }
        else{
            res[index-1]=s2[j-1];j--;index--;
        }
    }
    while(i>0){
        res[index-1]=s1[i-1];i--;index--;
    }
    while(j>0){
        res[index-1]=s2[j-1];j--;index--;
    }
    cout<<res<<endl;
    // if (n == 0) {
    //     return m;
    // }
    // if (m == 0) {
    //     return n;
    // }
    // if (dp[n - 1][m - 1] != -1) {
    //     return dp[n - 1][m - 1];
    // }
    // if (s1[n - 1] == s2[m - 1]) {
    //     return 1 + LCS(s1, s2, n - 1, m - 1);
    // }
    // else {
    //     return 1 + min(LCS(s1, s2, n, m - 1), LCS(s1, s2, n - 1, m));
    // }
}
signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int t(1);
    // cin >> t;
    while (t--) {
        sum = 0;
        string s1, s2;
        cin >> s1 >> s2;
        // memset(dp, -1, sizeof(dp));
        LCS(s1, s2, s1.size(), s2.size());
    }
    return 0;
}