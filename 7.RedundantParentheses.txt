Problem Name: Redundant Parentheses
Problem Difficulty: None
Problem Constraints: 1 < t < 100 <br>
1< expression < 100
Problem Description:
You are given an balanced expression. You have to find if it contains duplicate parentheses or not. A set of parentheses are duplicate if same subexpression is surrounded by multiple parenthesis.

Input Format: First line contains integer t as number of test cases. <br>
Next t lines contains one balanced expression each. 
Sample Input: 2
(((a+(b))+(c+d)))
((a+(b))+(c+d))
Output Format: Print "Duplicate" if the expression has any redundancy. Else print "Not Duplicates".
Sample Output: Duplicate
Not Duplicates




=====Solution=====
// C++ program to find duplicate parenthesis in a
// balanced expression
#include <iostream>
#include <stack>
using namespace std;

// Function to find duplicate parenthesis in a
// balanced expression
bool findDuplicateparenthesis(string str)
{
	// create a stack of characters
	stack<char> Stack;

	// Iterate through the given expression
	for (char ch : str)
	{
		// if current character is close parenthesis ')'
		if (ch == ')')
		{
			// pop character from the stack
			char top = Stack.top();
			Stack.pop();

			// if immediate pop is a open parenthesis '(',
			// we have found duplicate
			if (top == '(')
				return true;

			// else we continue popping characters from the
			// stack till open parenthesis '(' is encountered
			else
			{
				while (top != '(')
				{
					top = Stack.top();
					Stack.pop();
				}
			}
		}

		// push open parenthesis '(', operators and
		// operands to stack
		else
			Stack.push(ch);
	}

	// No duplicates found
	return false;
}

// Driver code
int main()
{
	int t;
	cin>>t;
	for(int i=0;i<t;i++)
	{
		string str;
		cin>>str;
		if (findDuplicateparenthesis(str))
		cout << "Duplicate"<<endl;
	   else
		cout << "Not Duplicates"<<endl;
	}
	// input balanced expression
	//string str = "(((a+(b))+(c+d)))";
	// string str = "((a+(b))+(c+d))";

	// if (findDuplicateparenthesis(str))
	// 	cout << "Duplicate Found "<<endl;
	// else
	// 	cout << "No Duplicates Found "<<endl;

	return 0;
}
