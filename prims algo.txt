#include<bits/stdc++.h>
using namespace std;


class Graph{
    vector<pair<int,int>> *l;
    int V;
public:
    Graph(int V){
        this->V=V;
        l=new vector<pair<int,int>>[V];
    }
    void addedge(int x,int y,int w){
        l[x].push_back({w,y});
        l[y].push_back({w,x});
    }
    int prim_mst(){
        int ans=0;
        // min heap
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        //another array
        //visited array that denotes whether a node 
        //has been included in MST or Not
        vector<bool> visited(V,0);
        pq.push({0,0});// weight , node bcoz sort will be acc to weight
        while(!pq.empty()){
            auto best = pq.top();
            pq.pop();
            int to = best.second;
            int weight = best.first;
            if(visited[to]){
                //discard the edge and continue;
                continue;
            }
            // otherwise take the current edge
            ans+=weight;
            visited[to]=1;
            for(auto x: l[to]){
                if(visited[x.second]==0){
                    pq.push({x.first,x.second});
                }
            }
        }
        return ans;
    }
};



int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int n;
    // cin>>n;
    n=14;
    Graph g(n);
    // vector<int> a(n);
    g.addedge( 0, 1, 4);
    g.addedge( 0, 7, 8);
    g.addedge( 1, 2, 8);
    g.addedge( 1, 7, 11);
    g.addedge( 2, 3, 7);
    g.addedge( 2, 8, 2);
    g.addedge( 2, 5, 4);
    g.addedge( 3, 4, 9);
    g.addedge( 3, 5, 14);
    g.addedge( 4, 5, 10);
    g.addedge( 5, 6, 2);
    g.addedge( 6, 7, 1);
    g.addedge( 6, 8, 6);
    g.addedge( 7, 8, 7);
    // for(int i=0;i<n;i++){
    //     int x,y,w;
    //     cin>>x>>y>>w;
    //     g.addedge(x-1,y-1,w);
    // }
    cout<<g.prim_mst()<<endl;
    
    return 0;
}