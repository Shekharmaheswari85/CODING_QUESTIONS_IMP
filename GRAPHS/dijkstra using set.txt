#include<bits/stdc++.h>
using namespace std;

class Graph {
    list< pair<int, int> > * l;
    int V;
public:
    Graph(int V) {
        this->V = V;
        l=new list<pair<int,int>>[V];
    }
    void addedge(int x, int y, int w) {
        l[y].push_back({w, x});
        l[x].push_back({w, y});
    }
    int dijkstra(int src,int dest){
        vector<int> dist(V,INT_MAX);
        set<pair<int,int>> s;
        dist[src]=0;
        s.insert({0,src}); //dist,node
        while(!s.empty()){
            auto it=s.begin();
            int node=it->second;
            int disttilnow=it->first;
            s.erase(it);
            // iterate over the neighbours of node
            for(auto nbrpair:l[node]){
                int nbr=nbrpair.second;
                int currentedge=nbrpair.first;
                if(disttilnow+currentedge<dist[nbr]){
                    // remove if the pair already exist
                    auto f=s.find({dist[nbr],nbr});
                    if(f!=s.end()){
                        s.erase(f);
                    }
                    dist[nbr]=disttilnow+currentedge;
                    s.insert({dist[nbr],nbr});
                }
            }
        }
        // single source distance to all other nodes
        for(int i=0;i<V;i++){
            cout<<"Node i "<<i <<" Dist "<<dist[i]<<endl;
        }
        return dist[dest-1];
    }
};

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    Graph g(4);
    g.addedge(0, 1, 1);
    g.addedge(1, 3, 3);
    g.addedge(3, 2, 4);
    g.addedge(2, 0, 2);
    g.addedge(0, 3, 2);
    g.addedge(1, 2, 2);
    cout << g.dijkstra(0,4) << endl;

    return 0;
}