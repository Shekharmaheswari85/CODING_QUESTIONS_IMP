#include<bits/stdc++.h>
#define ll long long int
#define endl "\n"
#define pb push_back
#define IOS ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL);
using namespace std;
class Graph
{
    int V;
    map<int, list<int>> l;
public:
    Graph(int V){
        this->V = V;
    }
    void addEdge(int x,int y){
        l[x].pb(y);
        l[y].pb(x);
    }
    void dfs_helper(int src,vector<bool> &visited){
        visited[src]=1;
        for(auto i: l[src]){
            if(!visited[i]){
                dfs_helper(i,visited);
            }
        }
    }
    int mother(){
        std::vector<bool> visited(V,false);
        int mothervertex = 0;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs_helper(i,visited);
                mothervertex = i;
            }
        }
        // if we can traverse all the elements present in the graph with the 
        // help of the integer mothervertex then it is really the mother  
        // vertex of the graph
        fill(visited.begin(),visited.end(),0);
        dfs_helper(mothervertex,visited);
        for(int i=0;i<V;i++){
            if(!visited[i]){
                return -1;
            }
        }
        return mothervertex;
    }
};
int main() {
    IOS;
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int t(1);
    // cin >> t;
    while (t--) {
        Graph g(7);
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(4, 1);
        g.addEdge(6, 4);
        g.addEdge(5, 6);
        g.addEdge(5, 2);
        g.addEdge(6, 0);

        cout << "A mother vertex is " << g.mother();
    }
    return 0;
}