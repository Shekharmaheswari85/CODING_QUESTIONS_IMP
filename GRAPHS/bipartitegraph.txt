#include<iostream>
#include<vector>
#include<algorithm>
#define endl "\n"
#define pb push_back
#define IOS ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL);
using namespace std;
bool dfs_helper(vector<int> graph[],int node,int parent,int *visited,int color){
    //come to node
    visited[node]=color;
    for(auto nbr:graph[node]){
        if(visited[nbr]==0){
            int subprb=dfs_helper(graph,nbr,node,visited,3-color);
            if(!subprb){
                return false;
            }
        }
        else if(nbr!=parent and color==visited[nbr]){
            return false;
        }
    }
    return true;
}
bool dfs(vector<int> graph[],int n){
    //visited,color
    int visited[n]={0}; //0-not visted,1-visted color one ,2-visited color 2
    int ans=dfs_helper(graph,0,-1,visited);
    for(int i=0;i<n;i++){
        cout<<i<<" - Color "<<visited[i]<<endl;
    }
    return ans;
}
int main() {
    IOS;
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int V, E;
    V = 4 , E = 8;
      //adjacency list for storing graph
    vector<int> adj[V];
      adj[0] = {1,3};
      adj[1] = {0,2};
      adj[2] = {1,3};
      adj[3] = {0,2};
     
    if(dfs(adj,V)){
        cout<<"Bipartite graph";
    }
    else{
        cout<<"Not bipartite graph";
    }
    
    return 0;
}