#include<bits/stdc++.h>
using namespace std;

class Graph {
    list< pair<int, int> > * l;
    int V;
public:
    Graph(int V) {
        this->V = V;
        l=new list<pair<int,int>>[V];
    }
    void addedge(int x, int y, int w) {
        l[y].push_back({w, x});
        l[x].push_back({w, y});
    }
    int dijkstra(int src,int dest){
        priority_queue<pair<int,int> , vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(V,INT_MAX);
        dist[src]=0;
        pq.push({0,src});
        while(!pq.empty()){
            int u=pq.top().second;
            pq.pop();
            for(auto nbrpair:l[u]){
                int node=nbrpair.second;
                int weight=nbrpair.first;
                if(dist[node]>dist[u]+weight){
                    dist[node]=dist[u]+weight;
                    pq.push({dist[node],node});
                }
            }
        }
        // single source distance to all other nodes
        for(int i=0;i<V;i++){
            cout<<"Node i "<<i <<" Dist "<<dist[i]<<endl;
        }
        return dist[dest-1];
    }
};

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    Graph g(4);
    g.addedge(0, 1, 1);
    g.addedge(1, 3, 3);
    g.addedge(3, 2, 4);
    g.addedge(2, 0, 2);
    g.addedge(0, 3, 2);
    g.addedge(1, 2, 2);
    cout << g.dijkstra(0,4) << endl;

    return 0;
}#include<bits/stdc++.h>
using namespace std;

class Graph {
    list< pair<int, int> > * l;
    int V;
public:
    Graph(int V) {
        this->V = V;
        l=new list<pair<int,int>>[V];
    }
    void addedge(int x, int y, int w) {
        l[y].push_back({w, x});
        l[x].push_back({w, y});
    }
    int dijkstra(int src,int dest){
        priority_queue<pair<int,int> , vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(V,INT_MAX);
        dist[src]=0;
        pq.push({0,src});
        while(!pq.empty()){
            int u=pq.top().second;
            pq.pop();
            for(auto nbrpair:l[u]){
                int node=nbrpair.second;
                int weight=nbrpair.first;
                if(dist[node]>dist[u]+weight){
                    dist[node]=dist[u]+weight;
                    pq.push({dist[node],node});
                }
            }
        }
        // single source distance to all other nodes
        for(int i=0;i<V;i++){
            cout<<"Node i "<<i <<" Dist "<<dist[i]<<endl;
        }
        return dist[dest-1];
    }
};

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    Graph g(4);
    g.addedge(0, 1, 1);
    g.addedge(1, 3, 3);
    g.addedge(3, 2, 4);
    g.addedge(2, 0, 2);
    g.addedge(0, 3, 2);
    g.addedge(1, 2, 2);
    cout << g.dijkstra(0,4) << endl;

    return 0;
}