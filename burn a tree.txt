#include<bits/stdc++.h>
#define ll long long int
#define endl "\n"
#define pb push_back
#define IOS ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL);
using namespace std;
struct Node {
	int key;
	Node *left, *right;
};
Node* newNode(int key) {
	Node* temp = new Node;
	temp->key = key;
	temp->left = temp->right = NULL;
	return temp;
}
int burntreeuntill(Node* root, int target, queue<Node*>& q) {
	if (root == NULL) {
		return 0;
	}
	if (root->key == target) {
		cout << root->key << endl;
		if (root->left != NULL) {
			q.push(root->left);
		}
		if (root->right != NULL) {
			q.push(root->right);
		}
		return 1;
	}
	int a = burntreeuntill(root->left, target, q);
	if (a == 1) {
		int qsize = q.size();
		while (qsize--) {
			Node* temp = q.front();
			cout << temp->key << " ";
			q.pop();
			if (temp->left) {
				q.push(temp->left);
			}
			if (temp->right) {
				q.push(temp->right);
			}
		}
		if (root->right != NULL) {
			q.push(root->right);
		}
		cout << root->key << endl;
		return 1;
	}
	int b = burntreeuntill(root->right, target, q);
	if (b == 1) {
		int qsize = q.size();
		while (qsize--) {
			Node* temp = q.front();
			cout << temp->key << " ";
			q.pop();
			if (temp->left) {
				q.push(temp->left);
			}
			if (temp->right) {
				q.push(temp->right);
			}
		}
		if (root->left != NULL) {
			q.push(root->left);
		}
		cout << root->key << endl;
		return 1;
	}
}
void burntree(Node* root, int target) {
	queue<Node*> q;
	burntreeuntill(root, target, q);
	while (!q.empty()) {
		int qsize = q.size();
		while (qsize--) {
			Node* temp = q.front();
			cout << temp->key << " ";
			q.pop();
			if (temp->left) {
				q.push(temp->left);
			}
			if (temp->right) {
				q.push(temp->right);
			}
		}
	}
	cout << endl;
}
int main() {
	IOS;
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int t(1);
	//cin >> t;
	while (t--) {
		Node* root = newNode(10);
		root->left = newNode(12);
		root->right = newNode(13);

		root->right->left = newNode(14);
		root->right->right = newNode(15);

		root->right->left->left = newNode(21);
		root->right->left->right = newNode(22);
		root->right->right->left = newNode(23);
		root->right->right->right = newNode(24);
		int targetNode = 14;

		// Function call
		burntree(root, targetNode);
	}
	return 0;
}