Problem Name: DIVISIBLE SUBARRAYS
Problem Difficulty: None
Problem Constraints: 1<=T<=10 <br>
1<=N<=10^5 <br>
|a<sub>i</sub>|<=10^9

Problem Description:
You are given N elements, *a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>....a<sub>N</sub>*. Find the number of *good* sub-arrays.<br>
A good sub-array is a sub-array [*a<sub>i</sub>,a<sub>i+1</sub>,a<sub>i+2</sub>....a<sub>j</sub>*] such that (*a<sub>i</sub>+a<sub>i+1</sub>+a<sub>i+2</sub>+....+a<sub>j</sub>*) is divisible by N.


<img src="https://image.flaticon.com/icons/svg/339/339692.svg" width=200px>

Input Format: The first line contains the number of test cases T. First line of each test case contains an integer N denoting the number of elements. Second line of each test case contains N integers, a1, a2, a3....aN, where ai denotes the ith element of the array.
Sample Input: 2
5
1 1 1 1 1
5
5 5 5 5 5

Output Format: Output a single integer denoting the number of good sub-arrays.
Sample Output: 1
15




=====Solution=====
#include <iostream>
#include <stdlib.h>
#include <cstring>

#define ff first
#define se second
#define pb push_back
#define nn 100010
#define mt make_tuple
#define mp make_pair
#define ll long long int
#define db double
#define ldb long double
#define inf 1000000000000000000ll
#define logn 20
#define mod 1000000007ll
#define mod1 mod
#define mod2 100000009ll
#define sqr(a) a*1ll*a
#define cmp 1e-16
using namespace std;

ll a[nn],pre[nn];

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		ll sum=0;
		memset(pre,0,sizeof pre);
		for(int i=0;i<n;i++)
		{
			cin>>a[i];
			sum+=a[i];
			sum%=n;
			sum=(sum+n)%n;
			pre[sum]++;
		}
		ll ans=(pre[0]*(pre[0]+1))/2;
		for(int i=1;i<n;i++)
		{
			ans+=(pre[i]*(pre[i]-1))/2;
		}
		cout<<ans<<endl;
	}
    return 0;
}